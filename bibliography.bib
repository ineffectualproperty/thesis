
@article{schneider_implementing_1990,
	title = {Implementing {Fault}-tolerant {Services} {Using} the {State} {Machine} {Approach}: {A} {Tutorial}},
	volume = {22},
	issn = {0360-0300},
	shorttitle = {Implementing {Fault}-tolerant {Services} {Using} the {State} {Machine} {Approach}},
	url = {http://doi.acm.org/10.1145/98163.98167},
	doi = {10.1145/98163.98167},
	abstract = {The state machine approach is a general method for implementing fault-tolerant services in distributed systems. This paper reviews the approach and describes protocols for two different failure models—Byzantine and fail stop. Systems reconfiguration techniques for removing faulty components and integrating repaired components are also discussed.},
	number = {4},
	urldate = {2018-02-11},
	journal = {ACM Comput. Surv.},
	author = {Schneider, Fred B.},
	month = dec,
	year = {1990},
	pages = {299--319},
	file = {Schneider - 1990 - Implementing Fault-tolerant Services Using the Sta.pdf:C\:\\Users\\Frederik\\Zotero\\storage\\VVGIRLMT\\Schneider - 1990 - Implementing Fault-tolerant Services Using the Sta.pdf:application/pdf}
}

@article{androulaki_hyperledger_2018,
	title = {Hyperledger {Fabric}: {A} {Distributed} {Operating} {System} for {Permissioned} {Blockchains}},
	shorttitle = {Hyperledger {Fabric}},
	url = {http://arxiv.org/abs/1801.10228},
	abstract = {Hyperledger Fabric is a modular and extensible open-source system for deploying and operating permissioned blockchains. Fabric is currently used in more than 400 prototypes and proofs-of-concept of distributed ledger technology, as well as several production systems, across different industries and use cases. Starting from the premise that there are no "one-size-fits-all" solutions, Fabric is the first truly extensible blockchain system for running distributed applications. It supports modular consensus protocols, which allows the system to be tailored to particular use cases and trust models. Fabric is also the first blockchain system that runs distributed applications written in general-purpose programming languages, without systemic dependency on a native cryptocurrency. This stands in sharp contrast to existing blockchain platforms for running smart contracts that require code to be written in domain-specific languages or rely on a cryptocurrency. Furthermore, it uses a portable notion of membership for realizing the permissioned model, which may be integrated with industry-standard identity management. To support such flexibility, Fabric takes a novel approach to the design of a permissioned blockchain and revamps the way blockchains cope with non-determinism, resource exhaustion, and performance attacks. This paper describes Fabric, its architecture, the rationale behind various design decisions, its security model and guarantees, its most prominent implementation aspects, as well as its distributed application programming model. We further evaluate Fabric by implementing and benchmarking a Bitcoin-inspired digital currency. We show that Fabric achieves end-to-end throughput of more than 3500 transactions per second in certain popular deployment configurations, with sub-second latency.},
	urldate = {2018-02-11},
	journal = {arXiv:1801.10228 [cs]},
	author = {Androulaki, Elli and Barger, Artem and Bortnikov, Vita and Cachin, Christian and Christidis, Konstantinos and De Caro, Angelo and Enyeart, David and Ferris, Christopher and Laventman, Gennady and Manevich, Yacov and Muralidharan, Srinivasan and Murthy, Chet and Nguyen, Binh and Sethi, Manish and Singh, Gari and Smith, Keith and Sorniotti, Alessandro and Stathakopoulou, Chrysoula and Vukolić, Marko and Cocco, Sharon Weed and Yellick, Jason},
	month = jan,
	year = {2018},
	note = {arXiv: 1801.10228},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Distributed, Parallel, and Cluster Computing},
	file = {arXiv\:1801.10228 PDF:C\:\\Users\\Frederik\\Zotero\\storage\\ZHQ3NTFY\\Androulaki et al. - 2018 - Hyperledger Fabric A Distributed Operating System.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\EMKL8E69\\1801.html:text/html}
}

@article{liu_scalable_2016,
	title = {Scalable {Byzantine} {Consensus} via {Hardware}-assisted {Secret} {Sharing}},
	journal = {arXiv preprint arXiv:1612.04997},
	author = {Liu, Jian and Li, Wenting and Karame, Ghassan O. and Asokan, N.},
	year = {2016},
	file = {Fulltext:C\:\\Users\\Frederik\\Zotero\\storage\\8WZ84UEC\\Liu et al. - 2016 - Scalable Byzantine Consensus via Hardware-assisted.pdf:application/pdf;Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\HRCP9E8M\\1612.html:text/html}
}

@inproceedings{bentov_cryptocurrencies_2016,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Cryptocurrencies {Without} {Proof} of {Work}},
	isbn = {978-3-662-53356-7 978-3-662-53357-4},
	url = {https://link.springer.com/chapter/10.1007/978-3-662-53357-4_10},
	doi = {10.1007/978-3-662-53357-4_10},
	abstract = {We study decentralized cryptocurrency protocols in which the participants do not deplete physical scarce resources. Such protocols commonly rely on Proof of Stake, i.e., on mechanisms that extend voting power to the stakeholders of the system. We offer analysis of existing protocols that have a substantial amount of popularity. We then present our novel pure Proof of Stake protocols, and argue that they help in mitigating problems that the existing protocols exhibit.},
	language = {en},
	urldate = {2017-10-06},
	booktitle = {Financial {Cryptography} and {Data} {Security}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Bentov, Iddo and Gabizon, Ariel and Mizrahi, Alex},
	month = feb,
	year = {2016},
	pages = {142--157},
	file = {Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\BKJ3XS3M\\10.html:text/html}
}

@article{correia_byzantine_2011,
	title = {Byzantine consensus in asynchronous message-passing systems: a survey},
	volume = {2},
	shorttitle = {Byzantine consensus in asynchronous message-passing systems},
	number = {2},
	journal = {International Journal of Critical Computer-Based Systems},
	author = {Correia, Miguel and Veronese, Giuliana Santos and Neves, Nuno Ferreira and Verissimo, Paulo},
	year = {2011},
	pages = {141--161},
	annote = {Har et afsnit om at circumvente TLP-imposibility med "Hybridisation and wormholes" - de giver TPM som eksempel på et wormhole.},
	file = {Fulltext:C\:\\Users\\Frederik\\Zotero\\storage\\V4KGJT5C\\Correia et al. - 2011 - Byzantine consensus in asynchronous message-passin.pdf:application/pdf;Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\UNK9TXCH\\IJCCBS.2011.html:text/html}
}

@techreport{matetic_rote:_2017,
	title = {{ROTE}: {Rollback} {Protection} for {Trusted} {Execution}},
	shorttitle = {{ROTE}},
	url = {http://eprint.iacr.org/2017/048},
	abstract = {Security architectures such as Intel SGX need protection against rollback attacks, where the adversary violates the integrity of a protected application state by replaying old persistently stored data or by starting multiple application instances. Successful rollback attacks have serious consequences on applications such as financial services. In this paper, we propose a new approach for rollback protection on SGX. The intuition behind our approach is simple. A single platform cannot efficiently prevent rollback, but in many practical scenarios, multiple processors can be enrolled to assist each other. We design and implement a rollback protection system called ROTE that realizes integrity protection as a distributed system. We construct a model that captures adversarial ability to schedule enclave execution and show that our solution achieves a strong security property: the only way to violate integrity is to reset all participating platforms to their initial state. We implement ROTE and demonstrate that distributed rollback protection can provide significantly better performance than previously known solutions based on local non-volatile memory.},
	number = {048},
	urldate = {2017-11-29},
	author = {Matetic, Sinisa and Ahmed, Mansoor and Kostiainen, Kari and Dhar, Aritra and Sommer, David and Gervais, Arthur and Juels, Ari and Capkun, Srdjan},
	year = {2017},
	keywords = {Distributed system, Rollback protection, SGX, State protection, TEE, Trusted Execution},
	file = {ePrint IACR Full Text PDF:C\:\\Users\\Frederik\\Zotero\\storage\\TFE2PNMI\\Matetic m.fl. - 2017 - ROTE Rollback Protection for Trusted Execution.pdf:application/pdf;ePrint IACR Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\ZB9VDSF7\\048.html:text/html}
}

@article{verissimo_travelling_2006,
	title = {Travelling through wormholes: a new look at distributed systems models},
	volume = {37},
	shorttitle = {Travelling through wormholes},
	number = {1},
	journal = {ACM SIGACT News},
	author = {Veríssimo, Paulo E.},
	year = {2006},
	pages = {66--81},
	file = {p66-verissimo.pdf:C\:\\Users\\Frederik\\Zotero\\storage\\9YQZYHF9\\p66-verissimo.pdf:application/pdf;Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\5X2F2H6X\\citation.html:text/html}
}

@article{fischer_impossibility_1985,
	title = {Impossibility of {Distributed} {Consensus} with {One} {Faulty} {Process}},
	volume = {32},
	issn = {0004-5411},
	url = {http://doi.acm.org/10.1145/3149.214121},
	doi = {10.1145/3149.214121},
	abstract = {The consensus problem involves an asynchronous system of processes, some of which may be unreliable. The problem is for the reliable processes to agree on a binary value. In this paper, it is shown that every protocol for this problem has the possibility of nontermination, even with only one faulty process. By way of contrast, solutions are known for the synchronous case, the “Byzantine Generals” problem.},
	number = {2},
	urldate = {2018-02-19},
	journal = {J. ACM},
	author = {Fischer, Michael J. and Lynch, Nancy A. and Paterson, Michael S.},
	month = apr,
	year = {1985},
	pages = {374--382},
	file = {ACM Full Text PDF:C\:\\Users\\Frederik\\Zotero\\storage\\D5SXNZQW\\Fischer et al. - 1985 - Impossibility of Distributed Consensus with One Fa.pdf:application/pdf}
}

@inproceedings{castro_practical_1999,
	title = {Practical {Byzantine} fault tolerance},
	volume = {99},
	booktitle = {{OSDI}},
	author = {Castro, Miguel and Liskov, Barbara},
	year = {1999},
	pages = {173--186},
	file = {Fulltext:C\:\\Users\\Frederik\\Zotero\\storage\\YLADX7X6\\Castro and Liskov - 1999 - Practical Byzantine fault tolerance.ps:application/postscript;osdi99.pdf:C\:\\Users\\Frederik\\Zotero\\storage\\B7LCL5PH\\osdi99.pdf:application/pdf;Snapshot:C\:\\Users\\Frederik\\Zotero\\storage\\N429RAHS\\castro.html:text/html}
}